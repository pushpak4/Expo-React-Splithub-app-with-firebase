import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  FlatList,
  TouchableOpacity,
  Image,
  ScrollView,
  Platform,
  NativeModules,
  SafeAreaView,
} from 'react-native';
import styles from "./Styles";
const { StatusBarManager } = NativeModules;
import { Ionicons } from '@expo/vector-icons';
import bellIcon from './assets/icons/bell.png';
import { firebaseConfig } from './config';
import * as firebase from 'firebase';
import 'firebase/firestore';
import 'firebase/auth';



if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}

const firestore = firebase.firestore();

export default function Main({ navigation, route }) {
  const [friends, setFriends] = useState([]);
  const [groups, setGroups] = useState([]);
  const [newFriendName, setNewFriendName] = useState('');
  const [selectedFriends, setSelectedFriends] = useState([]);
  const [groupName, setGroupName] = useState('');
  const [splitWithFriend, setSplitWithFriend] = useState('');
  const [groupedFriends, setGroupedFriends] = useState([]);
  const userName = route.params?.userName || '';

  useEffect(() => {
 
    const friendsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('friends');
    const groupsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('groups');

    const friendsListener = friendsRef.onSnapshot((snapshot) => {
      const friendsData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setFriends(friendsData);
    });

    const groupsListener = groupsRef.onSnapshot((snapshot) => {
      const groupsData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setGroups(groupsData);
    });

    return () => {
      friendsListener();
      groupsListener();
    };
  }, [userName]);

  const logout = () => {
    navigation.navigate('LoginScreen');
  };

  const addExpense = () => {
    navigation.navigate('ExpenseScreen');
  };
  const addFriend = async () => {
    if (newFriendName) {
      const friendsRef = firestore
        .collection('users')
        .doc(userName)
        .collection('friends');
      const friendAlreadyExists = await friendsRef
        .where('name', '==', newFriendName)
        .get()
        .then((querySnapshot) => !querySnapshot.empty);

      if (friendAlreadyExists) {
        alert('Friend with the same name already exists.');
        return;
      }
      const newFriend = {
        name: newFriendName,
      };

      await friendsRef.add(newFriend);
      setNewFriendName('');
      alert('New Friend added successfully');
    }
  };

  const sendReminder = (friend) => {
    alert(`Reminder sent to ${friend.name} to clear owing balance`);
  };

  const deleteFriend = async (friend) => {
    const friendsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('friends');
    await friendsRef.doc(friend.id).delete();

    const groupsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('groups');
    const groupsSnapshot = await groupsRef.get();

    groupsSnapshot.forEach(async (groupDoc) => {
      const groupData = groupDoc.data();
      if (groupData.members.some((member) => member.id === friend.id)) {
        const updatedMembers = groupData.members.filter(
          (member) => member.id !== friend.id
        );
        await groupsRef.doc(groupDoc.id).update({ members: updatedMembers });
      }
    });

    alert(`${friend.name} deleted successfully`);
  };

  const removeFromGroup = async (friend, group) => {
    const groupsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('groups');
    const groupDoc = await groupsRef.doc(group.id).get();

    if (groupDoc.exists) {
      const updatedMembers = groupDoc
        .data()
        .members.filter((member) => member.id !== friend.id);
      await groupsRef.doc(group.id).update({ members: updatedMembers });
      alert(`${friend.name} removed from ${group.name}`);
    }
  };

  const deleteGroup = async (group) => {
    const groupsRef = firestore
      .collection('users')
      .doc(userName)
      .collection('groups');
    await groupsRef.doc(group.id).delete();
    alert(`${group.name} deleted successfully`);
  };

  const handleImageClick = (friend) => {
    if (
      selectedFriends.some(
        (selectedFriend) => selectedFriend.name === friend.name
      )
    ) {
      setSelectedFriends((prevSelected) =>
        prevSelected.filter(
          (selectedFriend) => selectedFriend.name !== friend.name
        )
      );
    } else {
      setSelectedFriends((prevSelected) => [...prevSelected, friend]);
    }
  };
  const handleFriendSelection = (friend) => {
    setSplitWithFriend(friend.name);
    navigation.navigate('ExpenseScreen', { splitWithFriend: friend.name });
  };

  const handleCheckboxToggle = (friend) => {
    const isGrouped = groupedFriends.some(
      (groupedFriend) => groupedFriend.name === friend.name
    );

    if (isGrouped) {
      setGroupedFriends((prevGrouped) =>
        prevGrouped.filter(
          (groupedFriend) => groupedFriend.name !== friend.name
        )
      );
    } else {
      setGroupedFriends((prevGrouped) => [...prevGrouped, friend]);
    }
  };

const isGroupAlreadyExists = () => {
 
  return firestore
    .collection('users')
    .doc(userName)
    .collection('groups')
    .where('name', '==', groupName)
    .where('members', '==', groupedFriends)
    .get()
    .then((querySnapshot) => !querySnapshot.empty);
};
  const createGroup = async () => {
    if (groupName && groupedFriends.length > 0) {
      const groupAlreadyExists = await isGroupAlreadyExists();
      if (groupAlreadyExists) {
      alert('Group with the same name and members already exists.');
      return;
    }
      const groupsRef = firestore
        .collection('users')
        .doc(userName)
        .collection('groups');
      const newGroup = {
        name: groupName,
        members: groupedFriends,
      };

      await groupsRef.add(newGroup);
      setSplitWithFriend(
        groupedFriends.map((friend) => friend.name).join(', ')
      );
      navigation.navigate('HomeScreen');
      alert(
        `Group "${groupName}" created with ${groupedFriends.length} members.`
      );
      setSelectedFriends([]);
      setGroupName('');
      setGroupedFriends([]);
    } else {
      alert('Please provide a group name and select friends for the group.');
    }
  };

   
  const [friendListVisible, setFriendListVisible] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const toggleFriendListVisibility = () => {
    setFriendListVisible((prevVisibility) => !prevVisibility);
  };
  const toggleExpandCollapse = () => {
    setIsExpanded((prevExpanded) => !prevExpanded);
  };

  const [groupListVisible, setGroupListVisible] = useState(false);
  const [isGroupExpanded, setIsGroupExpanded] = useState(false);
  const toggleGroupListVisibility = () => {
    setGroupListVisible((prevVisibility) => !prevVisibility);
  };
  const toggleGroupExpandCollapse = () => {
    setIsGroupExpanded((prevExpanded) => !prevExpanded);
  };
          
  return (
    <SafeAreaView
      style={{
        flex: 1,
        paddingTop: Platform.OS === 'android' ? StatusBarManager.HEIGHT : 0,
      }}>
      <ScrollView >
        <View style={styles.container}>
          <TouchableOpacity
            onPress={logout}
            style={[styles.buttonCss, styles.logoutCss]}>
            <Ionicons name="ios-log-out-outline" size={20} color="white" />
            <Text style={styles.buttonTextCss}>Log Out</Text>
          </TouchableOpacity>
          <Text style={styles.header}>Welcome, {userName}!</Text>

          <View style={{marginVertical: 4}}/>
          <Text style={[styles.title, styles.mainTitle]}>Add New Expense</Text>
          <TouchableOpacity style={[styles.buttonCss, styles.addexpense]} onPress={addExpense}>
            <Ionicons name="ios-add-circle-outline" size={20} color="white" />
            <Text style={styles.buttonTextCss}>Add a New Expense</Text>
          </TouchableOpacity>

          <View style={styles.space} />
           
          <Text style={[styles.title, styles.mainTitle]}>Add Friend</Text>
           <TextInput
            style={styles.mainInput}
            placeholder="Enter Friend's Name"
            placeholderTextColor="#999999"
            onChangeText={setNewFriendName}
            value={newFriendName}
          />
        
          <TouchableOpacity
            style={
              !newFriendName
                ? [styles.buttonCss, styles.disabledCss]
                : styles.buttonCss
            }
            onPress={addFriend}>
            <Ionicons name="ios-add-circle-outline" size={20} color="white" />
            <Text style={styles.buttonTextCss}>Add Friend</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.buttonCss}
            onPress={toggleExpandCollapse}>
            <Ionicons
              name={isExpanded ? 'chevron-up-circle-outline' : 'chevron-down-circle-outline'}
              size={20}
              color="white"
            />
            <Text style={styles.buttonTextCss}>
              {isExpanded ? 'Hide' : 'View'} Friend List
            </Text>
          </TouchableOpacity>
          {isExpanded && (   
          <View>     
          <Text style={[styles.title, styles.mainTitle]}>Friend List</Text>
          <FlatList 
            data={friends}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity onPress={() => handleFriendSelection(item)}>
                <View style={styles.friendItemContainer}>
                  
                  <Text style={styles.friendName}>{item.name}</Text>
                  <TouchableOpacity onPress={() => sendReminder(item)}>
                    <Image source={bellIcon} style={styles.bellIcon} />
                  </TouchableOpacity>
                  <TouchableOpacity onPress={() => deleteFriend(item)}>
                    <Ionicons
                      name="trash-outline"
                      size={24}
                      color="black"
                      style={styles.deleteIcon}
                    />
                  </TouchableOpacity>
                </View>
              </TouchableOpacity>
            )}
          />
         </View> 
          )}
          <View style={styles.space} />
           
          <Text style={[styles.title, styles.mainTitle]}>Create Group</Text>
          <TextInput
            style={styles.mainInput}
            placeholder="Enter Group Name"
            placeholderTextColor="#999999"
            onChangeText={setGroupName}
            value={groupName}
          />
           <FlatList 
            data={friends}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity onPress={() => handleCheckboxToggle(item)}>
                <View style={styles.friendItemContainer}>
                  <Ionicons
                    name={
                      groupedFriends.some(
                        (groupedFriend) => groupedFriend.name === item.name
                      )
                        ? 'checkbox-outline'
                        : 'square-outline'
                    }
                    size={24}
                    color="black"
                    style={styles.checkbox}
                  />
                  <Text style={styles.friendName}>{item.name}</Text>
                </View>
              </TouchableOpacity>
            )}
          />
          <TouchableOpacity
            style={
              !groupName || groupedFriends.length === 0
                ? [styles.buttonCss, styles.disabledCss]
                : styles.buttonCss
            }
            onPress={createGroup}>
            <Ionicons name="ios-people-outline" size={20} color="white" />
            <Text style={styles.buttonTextCss}>Create Group</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.buttonCss}
            onPress={toggleGroupExpandCollapse}>
            <Ionicons
              name={isGroupExpanded ? 'chevron-up-circle-outline' : 'chevron-down-circle-outline'}
              size={20}
              color="white"
            />
            <Text style={styles.buttonTextCss}>
              {isGroupExpanded ? 'Hide' : 'View'} Your Groups
            </Text>
          </TouchableOpacity>
          {isGroupExpanded && (   
          <View>     
          <Text style={[styles.title, styles.mainTitle]}>Your Groups</Text>
          <FlatList
            data={groups}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <View style={styles.groupContainer}>
                <View style={{ flexDirection: 'row' }}>
                  <Ionicons name="ios-list" size={20} color="black" />
                  <Text style={styles.groupName}>{item.name}</Text>
                </View>

                <FlatList
                  data={item.members || []}
                  keyExtractor={(member) => member.id || ''}
                  renderItem={({ item: member }) => (
                    <View style={styles.friendItemContainer}>
                      <Text style={styles.friendName}>{member.name}</Text>
                      <TouchableOpacity
                        onPress={() => removeFromGroup(member, item)}>
                        <Ionicons
                          name="trash-outline"
                          size={24}
                          color="black"
                          style={styles.deleteIcon}
                        />
                      </TouchableOpacity>
                    </View>
                  )}
                />

                <TouchableOpacity
                  style={styles.buttonCss}
                  onPress={() => deleteGroup(item)}>
                  <Ionicons name="ios-trash-outline" size={20} color="white" />
                  <Text style={styles.deleteButtonText}>Delete the Group</Text>
                </TouchableOpacity>
              </View>
            )}
          />
          </View>
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}
